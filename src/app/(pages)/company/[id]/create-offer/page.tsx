"use client";

import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useParams, useRouter } from "next/navigation";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import CompanyOfferService from "@/services/companyOffer.service";
import SkillService from "@/services/skill.service";
import { useQuery, useQueryClient } from "@tanstack/react-query";
import { Skill, EnumStatusTYpe } from "@prisma/client";
import { format } from "date-fns";
import { toast } from "sonner";
import { CompanyOffer, Type, Status } from "@/types/companyOffer.type";

interface Option {
  label: string;
  value: string;
}

interface CreateOfferFormData {
  title: string;
  description: string;
  type: "Stage" | "Alternance";
  startDate: string;
  expectedSkills: string;
  skills: string[];
}

const CreateOfferPage = () => {
  const { id: companyId } = useParams() as { id: string };
  const router = useRouter();
  const queryClient = useQueryClient();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [userId, setUserId] = useState<string | null>(null);
  const [selectedSkills, setSelectedSkills] = useState<Option[]>([]);
  const [newSkillName, setNewSkillName] = useState("");
  const [isCreatingSkill, setIsCreatingSkill] = useState(false);
  const [isClient, setIsClient] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
  } = useForm<CreateOfferFormData>({
    defaultValues: {
      title: "",
      description: "",
      type: "Stage",
      startDate: format(new Date(), "yyyy-MM-dd"),
      expectedSkills: "",
      skills: [],
    },
  });

  // R√©cup√©rer toutes les comp√©tences disponibles
  const { data: skills = [] } = useQuery({
    queryKey: ["skills"],
    queryFn: () => SkillService.fetchSkills(),
  });

  // S'assurer que le code s'ex√©cute seulement c√¥t√© client
  useEffect(() => {
    setIsClient(true);
  }, []);

  // V√©rifier que l'utilisateur est bien le propri√©taire de l'entreprise
  useEffect(() => {
    if (!isClient) return; // Ne pas ex√©cuter c√¥t√© serveur

    const checkUser = async () => {
      try {
        const storedUserId = localStorage.getItem("userId");
        console.log("üîç UserId r√©cup√©r√©:", storedUserId);
        setUserId(storedUserId);

        // V√©rifier l'acc√®s √† la page
        if (storedUserId) {
          // Code de v√©rification du propri√©taire si n√©cessaire
        } else {
          console.log("‚ö†Ô∏è Aucun utilisateur connect√©");
          toast.error("Vous devez √™tre connect√© pour cr√©er une offre.");
          router.push(`/company/${companyId}`);
        }
      } catch (error) {
        console.error("‚ùå Erreur lors de la v√©rification de l'acc√®s:", error);
        toast.error("Une erreur est survenue. Veuillez r√©essayer.");
        router.push(`/company/${companyId}`);
      }
    };

    checkUser();
  }, [companyId, router, isClient]);

  const handleSkillSelect = (skillId: string) => {
    const skill = skills.find((s: Skill) => s.id === skillId);
    if (!skill) return;

    const isAlreadySelected = selectedSkills.some((s) => s.value === skillId);

    if (isAlreadySelected) {
      // Supprimer la comp√©tence
      const filteredSkills = selectedSkills.filter((s) => s.value !== skillId);
      setSelectedSkills(filteredSkills);
      setValue(
        "skills",
        filteredSkills.map((s) => s.value)
      );
    } else {
      // Ajouter la comp√©tence
      const newSkills = [
        ...selectedSkills,
        { label: skill.name, value: skill.id },
      ];
      setSelectedSkills(newSkills);
      setValue(
        "skills",
        newSkills.map((s) => s.value)
      );
    }
  };

  // Fonction pour cr√©er une nouvelle comp√©tence
  const createNewSkill = async () => {
    if (!newSkillName.trim() || isCreatingSkill) {
      return;
    }

    // V√©rifier si la comp√©tence existe d√©j√†
    const skillExists = skills.some(
      (s: Skill) => s.name.toLowerCase() === newSkillName.trim().toLowerCase()
    );

    if (skillExists) {
      // Trouver la comp√©tence existante
      const existingSkill = skills.find(
        (s: Skill) => s.name.toLowerCase() === newSkillName.trim().toLowerCase()
      );
      
      if (existingSkill) {
        // V√©rifier si la comp√©tence n'est pas d√©j√† s√©lectionn√©e
        const isAlreadySelected = selectedSkills.some((s) => s.value === existingSkill.id);
        
        if (!isAlreadySelected) {
          // Ajouter la comp√©tence aux s√©lections
          const skillOption = { label: existingSkill.name, value: existingSkill.id };
          setSelectedSkills([...selectedSkills, skillOption]);
          setValue(
            "skills",
            [...selectedSkills, skillOption].map((s) => s.value)
          );
          toast.success(`La comp√©tence "${existingSkill.name}" a √©t√© s√©lectionn√©e`);
        } else {
          toast.info(`La comp√©tence "${existingSkill.name}" est d√©j√† s√©lectionn√©e`);
        }
        
        // R√©initialiser le champ de saisie
        setNewSkillName("");
      }
      return;
    }

    setIsCreatingSkill(true);

    try {
      // Cr√©er la nouvelle comp√©tence dans la base de donn√©es
      const newSkill = await SkillService.createSkill({
        name: newSkillName.trim(),
      });

      // Mettre √† jour l'√©tat local
      const skillOption = { label: newSkill.name, value: newSkill.id };
      setSelectedSkills([...selectedSkills, skillOption]);
      setValue(
        "skills",
        [...selectedSkills, skillOption].map((s) => s.value)
      );

      // Rafra√Æchir la liste compl√®te des comp√©tences
      queryClient.invalidateQueries({ queryKey: ["skills"] });

      // R√©initialiser le champ de saisie
      setNewSkillName("");

      toast.success(`La comp√©tence "${newSkill.name}" a √©t√© ajout√©e`);
    } catch (error) {
      console.error("Erreur lors de la cr√©ation de la comp√©tence:", error);
      toast.error("Erreur lors de la cr√©ation de la comp√©tence");
    } finally {
      setIsCreatingSkill(false);
    }
  };

  const onSubmit = async (data: CreateOfferFormData) => {
    if (!userId) {
      toast.error("Vous devez √™tre connect√© pour cr√©er une offre.");
      return;
    }

    setIsSubmitting(true);
    try {
      // Pr√©parer les donn√©es pour l'API
      const offerData = {
        companyId: companyId,
        title: data.title,
        description: data.description,
        type: data.type === "Stage" ? EnumStatusTYpe.stage : EnumStatusTYpe.alternance,
        startDate: new Date(data.startDate),
        expectedSkills: data.expectedSkills || "",
        skills: data.skills,
      };

      await CompanyOfferService.postCompanyOffer(offerData);

      toast.success("Votre offre a √©t√© cr√©√©e avec succ√®s.");

      // Rediriger vers la page de l'entreprise
      router.push(`/company/${companyId}`);
    } catch (error) {
      console.error("Erreur lors de la cr√©ation de l'offre:", error);
      toast.error("Une erreur est survenue lors de la cr√©ation de l'offre.");
    } finally {
      setIsSubmitting(false);
    }
  };

  // Si l'utilisateur n'est pas connect√©, afficher un message
  if (!userId) {
    return (
      <div className="container flex items-center justify-center py-8">
        <Card>
          <CardHeader>
            <CardTitle>Acc√®s refus√©</CardTitle>
            <CardDescription>
              Vous devez √™tre connect√© pour cr√©er une offre.
            </CardDescription>
          </CardHeader>
        </Card>
      </div>
    );
  }

  return (
    <div className="container py-8">
      <Card>
        <CardHeader>
          <CardTitle>Cr√©er une nouvelle offre</CardTitle>
          <CardDescription>
            Remplissez le formulaire pour cr√©er une nouvelle offre d&aposemploi.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="title">Titre de l&aposoffre *</Label>
              <Input
                id="title"
                {...register("title", {
                  required: "Le titre est obligatoire",
                })}
                placeholder="Ex: D√©veloppeur Web Frontend"
              />
              {errors.title && (
                <p className="text-xs text-red-500">{errors.title.message}</p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="description">Description *</Label>
              <Textarea
                id="description"
                {...register("description", {
                  required: "La description est obligatoire",
                })}
                placeholder="D√©crivez les missions, les comp√©tences requises, etc."
                rows={6}
              />
              {errors.description && (
                <p className="text-xs text-red-500">
                  {errors.description.message}
                </p>
              )}
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="type">Type d&aposoffre *</Label>
                <Select
                  onValueChange={(value) =>
                    setValue("type", value as "Stage" | "Alternance")
                  }
                  defaultValue="Stage"
                >
                  <SelectTrigger>
                    <SelectValue placeholder="S√©lectionnez un type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Stage">Stage</SelectItem>
                    <SelectItem value="Alternance">Alternance</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="startDate">Date de d√©but *</Label>
                <Input
                  id="startDate"
                  type="date"
                  {...register("startDate", {
                    required: "La date de d√©but est obligatoire",
                  })}
                />
                {errors.startDate && (
                  <p className="text-xs text-red-500">
                    {errors.startDate.message}
                  </p>
                )}
              </div>
            </div>

            <div className="space-y-2">
              <Label>Comp√©tences requises</Label>

              {/* Ajouter une nouvelle comp√©tence */}
              <div className="flex gap-2 mb-4">
                <Input
                  placeholder="Ajouter une nouvelle comp√©tence..."
                  value={newSkillName}
                  onChange={(e) => setNewSkillName(e.target.value)}
                  className="flex-1"
                />
                <Button
                  type="button"
                  onClick={createNewSkill}
                  disabled={isCreatingSkill || !newSkillName.trim()}
                  variant="outline"
                >
                  {isCreatingSkill ? "Ajout..." : "Ajouter"}
                </Button>
              </div>

              <div className="relative">
                <p className="text-sm text-gray-600 mb-1">S√©lectionnez les comp√©tences requises:</p>
                {/* Liste des comp√©tences existantes */}
                <div 
                  className="max-h-[300px] overflow-y-auto border rounded p-2"
                  style={{ 
                    scrollbarWidth: 'thin',
                    scrollbarColor: '#3b82f6 #f3f4f6'
                  }}
                >
                  <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                    {skills.map((skill: Skill) => (
                      <div
                        key={skill.id}
                        className={`cursor-pointer p-2 rounded border ${
                          selectedSkills.some((s) => s.value === skill.id)
                            ? "bg-blue-100 border-blue-300"
                            : "bg-gray-50 border-gray-200 hover:bg-gray-100"
                        }`}
                        onClick={() => handleSkillSelect(skill.id)}
                      >
                        {skill.name}
                      </div>
                    ))}
                  </div>
                </div>
                {skills.length > 12 && (
                  <div className="absolute bottom-0 left-0 right-0 h-8 bg-gradient-to-t from-white to-transparent pointer-events-none" />
                )}
              </div>

              {/* Comp√©tences s√©lectionn√©es */}
              {selectedSkills.length > 0 && (
                <div className="mt-2">
                  <p className="text-sm text-gray-600 mb-1">
                    Comp√©tences s√©lectionn√©es:
                  </p>
                  <div className="flex flex-wrap gap-1">
                    {selectedSkills.map((skill) => (
                      <div
                        key={skill.value}
                        className="bg-blue-100 text-blue-800 text-xs rounded px-2 py-1 flex items-center"
                      >
                        {skill.label}
                        <button
                          type="button"
                          className="ml-1 text-blue-500 hover:text-blue-700"
                          onClick={() => handleSkillSelect(skill.value)}
                        >
                          √ó
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>

            <Button type="submit" disabled={isSubmitting} className="w-full">
              {isSubmitting ? "Cr√©ation en cours..." : "Cr√©er l'offre"}
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
};

export default CreateOfferPage;
